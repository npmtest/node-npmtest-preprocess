{"/home/travis/build/npmtest/node-npmtest-preprocess/test.js":"/* istanbul instrument in package npmtest_preprocess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocess/lib.npmtest_preprocess.js":"/* istanbul instrument in package npmtest_preprocess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_preprocess = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_preprocess = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocess/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-preprocess && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_preprocess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_preprocess\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_preprocess.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_preprocess.rollup.js'] =\n            local.assetsDict['/assets.npmtest_preprocess.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_preprocess.__dirname +\n                    '/lib.npmtest_preprocess.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-preprocess/node_modules/preprocess/lib/preprocess.js":"/*\n * preprocess\n * https://github.com/onehealth/preprocess\n *\n * Copyright (c) 2012 OneHealth Solutions, Inc.\n * Written by Jarrod Overson - http://jarrodoverson.com/\n * Licensed under the Apache 2.0 license.\n */\n\n'use strict';\n\nexports.preprocess         = preprocess;\nexports.preprocessFile     = preprocessFile;\nexports.preprocessFileSync = preprocessFileSync;\n\nvar path  = require('path'),\n    fs    = require('fs'),\n    os    = require('os'),\n    delim = require('./regexrules'),\n    XRegExp = require('xregexp');\n\nfunction preprocessFile(srcFile, destFile, context, callback, options) {\n  options = getOptionsForFile(srcFile, options);\n  context.src = srcFile;\n\n  fs.readFile(srcFile, function (err, data) {\n    if (err) return callback(err, data);\n    var parsed = preprocess(data, context, options);\n    fs.writeFile(destFile, parsed, callback);\n  });\n}\n\nfunction preprocessFileSync(srcFile, destFile, context, options) {\n  options = getOptionsForFile(srcFile, options);\n  context.src = srcFile;\n\n  var data = fs.readFileSync(srcFile);\n  var parsed = preprocess(data, context, options);\n  return fs.writeFileSync(destFile, parsed);\n}\n\nfunction getOptionsForFile(srcFile, options) {\n  options = options || {};\n  options.srcDir = options.srcDir || path.dirname(srcFile);\n  options.type = options.type || getExtension(srcFile);\n\n  return options;\n}\n\nfunction getExtension(filename) {\n  var ext = path.extname(filename||'').split('.');\n  return ext[ext.length - 1];\n}\n\nfunction preprocess(src, context, typeOrOptions) {\n  src = src.toString();\n  context = context || process.env;\n\n  // default values\n  var options = {\n    fileNotFoundSilentFail: false,\n    srcDir: process.cwd(),\n    srcEol: getEolType(src),\n    type: delim['html']\n  };\n\n  // needed for backward compatibility with 2.x.x series\n  if (typeof typeOrOptions === 'string') {\n    typeOrOptions = {\n      type: typeOrOptions\n    };\n  }\n\n  // needed for backward compatibility with 2.x.x series\n  if (typeof context.srcDir === \"string\") {\n    typeOrOptions = typeOrOptions || {};\n    typeOrOptions.srcDir = context.srcDir;\n  }\n\n  if (typeOrOptions && typeof typeOrOptions === 'object') {\n    options.srcDir = typeOrOptions.srcDir || options.srcDir;\n    options.fileNotFoundSilentFail = typeOrOptions.fileNotFoundSilentFail || options.fileNotFoundSilentFail;\n    options.srcEol = typeOrOptions.srcEol || options.srcEol;\n    options.type = delim[typeOrOptions.type] || options.type;\n  }\n\n  context = copy(context);\n\n  return preprocessor(src, context, options);\n}\n\nfunction preprocessor(src, context, opts, noRestoreEol) {\n  src = normalizeEol(src);\n\n  var rv = src;\n\n  rv = replace(rv, opts.type.include, processIncludeDirective.bind(null, false, context, opts));\n\n  if (opts.type.extend) {\n    rv = replaceRecursive(rv, opts.type.extend, function(startMatches, endMatches, include, recurse) {\n      var file = (startMatches[1] || '').trim();\n      var extendedContext = copy(context);\n      var extendedOpts = copy(opts);\n      extendedContext.src = path.join(opts.srcDir, file);\n      extendedOpts.srcDir = path.dirname(extendedContext.src);\n\n      var fileContents = getFileContents(extendedContext.src, opts.fileNotFoundSilentFail, context.src);\n      if (fileContents.error) {\n        return fileContents.contents;\n      }\n\n      var extendedSource = preprocessor(fileContents.contents, extendedContext, extendedOpts, true).trim();\n\n      if (extendedSource) {\n        include = include.replace(/^\\n?|\\n?$/g, '');\n        return replace(extendedSource, opts.type.extendable, recurse(include));\n      } else {\n        return '';\n      }\n    });\n  }\n\n  if (opts.type.foreach) {\n    rv = replaceRecursive(rv, opts.type.foreach, function(startMatches, endMatches, include, recurse) {\n      var variable = (startMatches[1] || '').trim();\n      var forParams = variable.split(' ');\n      if (forParams.length === 3) {\n        var contextVar = forParams[2];\n        var arrString = getDeepPropFromObj(context, contextVar);\n        var eachArr;\n        if (arrString.match(/\\{(.*)\\}/)) {\n          eachArr = JSON.parse(arrString);\n        } else if (arrString.match(/\\[(.*)\\]/)) {\n          eachArr = arrString.slice(1, -1);\n          eachArr = eachArr.split(',');\n          eachArr = eachArr.map(function(arrEntry){\n            return arrEntry.replace(/\\s*(['\"])(.*)\\1\\s*/, '$2');\n          });\n        } else {\n          eachArr = arrString.split(',');\n        }\n\n        var replaceToken = new RegExp(XRegExp.escape(forParams[0]), 'g');\n        var recursedInclude = recurse(include);\n\n        return Object.keys(eachArr).reduce(function(stringBuilder, arrKey){\n          var arrEntry = eachArr[arrKey];\n          return stringBuilder + recursedInclude.replace(replaceToken, arrEntry);\n        }, '');\n      } else {\n        return '';\n      }\n    });\n  }\n\n  if (opts.type.exclude) {\n    rv = replaceRecursive(rv, opts.type.exclude, function(startMatches, endMatches, include, recurse){\n      var test = (startMatches[1] || '').trim();\n      return testPasses(test,context) ? '' : recurse(include);\n    });\n  }\n\n  if (opts.type.if) {\n    rv = replaceRecursive(rv, opts.type.if, function (startMatches, endMatches, include, recurse) {\n      var variant = startMatches[1];\n      var test = (startMatches[2] || '').trim();\n      switch(variant) {\n        case 'if':\n          return testPasses(test,context) ? recurse(include) : '';\n        case 'ifdef':\n          return typeof getDeepPropFromObj(context, test) !== 'undefined' ? recurse(include) : '';\n        case 'ifndef':\n          return typeof getDeepPropFromObj(context, test) === 'undefined' ? recurse(include) : '';\n        default:\n          throw new Error('Unknown if variant ' + variant + '.');\n      }\n    });\n  }\n\n  rv = replace(rv, opts.type.echo, function (match, variable) {\n    variable = (variable || '').trim();\n    // if we are surrounded by quotes, echo as a string\n    var stringMatch = variable.match(/^(['\"])(.*)\\1$/);\n    if (stringMatch) return stringMatch[2];\n\n    return getDeepPropFromObj(context, (variable || '').trim());\n  });\n\n  rv = replace(rv, opts.type.exec, function (match, name, value) {\n    name = (name || '').trim();\n    value = value || '';\n\n    var params = value.split(',');\n    var stringRegex = /^['\"](.*)['\"]$/;\n\n    params = params.map(function(param){\n      param = param.trim();\n      if (stringRegex.test(param)) { // handle string parameter\n        return param.replace(stringRegex, '$1');\n      } else { // handle variable parameter\n        return getDeepPropFromObj(context, param);\n      }\n    });\n\n    var fn = getDeepPropFromObj(context, name);\n    if (!fn || typeof fn !== 'function') return '';\n\n    return fn.apply(context, params);\n  });\n\n  rv = replace(rv, opts.type['include-static'], processIncludeDirective.bind(null, true, context, opts));\n\n  if (!noRestoreEol) {\n    rv = restoreEol(rv, opts.srcEol);\n  }\n\n  return rv;\n}\n\nfunction getEolType(source) {\n  var eol;\n  var foundEolTypeCnt = 0;\n\n  if (source.indexOf('\\r\\n') >= 0) {\n    eol = '\\r\\n';\n    foundEolTypeCnt++;\n  }\n  if (/\\r[^\\n]/.test(source)) {\n    eol = '\\r';\n    foundEolTypeCnt++;\n  }\n  if (/[^\\r]\\n/.test(source)) {\n    eol = '\\n';\n    foundEolTypeCnt++;\n  }\n\n  if (eol == null || foundEolTypeCnt > 1) {\n    eol = os.EOL;\n  }\n\n  return eol;\n}\n\nfunction normalizeEol(source, indent) {\n  // only process any kind of EOL if indentation has to be added, otherwise replace only non \\n EOLs\n  if (indent) {\n    source = source.replace(/(?:\\r?\\n)|\\r/g, '\\n' + indent);\n  } else {\n    source = source.replace(/(?:\\r\\n)|\\r/g, '\\n');\n  }\n\n  return source;\n}\n\nfunction restoreEol(normalizedSource, originalEol) {\n  if (originalEol !== '\\n') {\n    normalizedSource = normalizedSource.replace(/\\n/g, originalEol);\n  }\n\n  return normalizedSource;\n}\n\nfunction replace(rv, rule, processor) {\n  var isRegex = typeof rule === 'string' || rule instanceof RegExp;\n  var isArray = Array.isArray(rule);\n\n  if (isRegex) {\n    rule = [new RegExp(rule,'gmi')];\n  } else if (isArray) {\n    rule = rule.map(function(subRule){\n      return new RegExp(subRule,'gmi');\n    });\n  } else {\n    throw new Error('Rule must be a String, a RegExp, or an Array.');\n  }\n\n  return rule.reduce(function(rv, rule){\n    return rv.replace(rule, processor);\n  }, rv);\n}\n\nfunction replaceRecursive(rv, rule, processor) {\n  if(!rule.start || !rule.end) {\n    throw new Error('Recursive rule must have start and end.');\n  }\n\n  var startRegex = new RegExp(rule.start, 'mi');\n  var endRegex = new RegExp(rule.end, 'mi');\n\n  function matchReplacePass(content) {\n    var matches = XRegExp.matchRecursive(content, rule.start, rule.end, 'gmi', {\n      valueNames: ['between', 'left', 'match', 'right']\n    });\n\n    var matchGroup = {\n      left: null,\n      match: null,\n      right: null\n    };\n\n    return matches.reduce(function (builder, match) {\n      switch(match.name) {\n        case 'between':\n          builder += match.value;\n          break;\n        case 'left':\n          matchGroup.left = startRegex.exec(match.value);\n          break;\n        case 'match':\n          matchGroup.match = match.value;\n          break;\n        case 'right':\n          matchGroup.right = endRegex.exec(match.value);\n          builder += processor(matchGroup.left, matchGroup.right, matchGroup.match, matchReplacePass);\n          break;\n      }\n      return builder;\n    }, '');\n  }\n\n  return matchReplacePass(rv);\n}\n\n\nfunction processIncludeDirective(isStatic, context, opts, match, linePrefix, file) {\n  file = (file || '').trim();\n  var indent = linePrefix.replace(/\\S/g, ' ');\n  var includedContext = copy(context);\n  var includedOpts = copy(opts);\n  includedContext.src = path.join(opts.srcDir,file);\n  includedOpts.srcDir = path.dirname(includedContext.src);\n\n  var fileContents = getFileContents(includedContext.src, opts.fileNotFoundSilentFail, context.src);\n  if (fileContents.error) {\n    return linePrefix + fileContents.contents;\n  }\n\n  var includedSource = fileContents.contents;\n  if (isStatic) {\n    includedSource = fileContents.contents;\n  } else {\n    includedSource = preprocessor(fileContents.contents, includedContext, includedOpts, true);\n  }\n\n  includedSource = normalizeEol(includedSource, indent);\n\n  if (includedSource) {\n    return linePrefix + includedSource;\n  } else {\n    return linePrefix;\n  }\n}\n\nfunction getTestTemplate(test) {\n  /*jshint evil:true*/\n  test = test || 'true';\n  test = test.trim();\n\n  // force single equals replacement\n  test = test.replace(/([^=!])=([^=])/g, '$1==$2');\n\n  return new Function(\"context\", \"with (context||{}){ return ( \" + test + \" ); }\");\n}\n\nfunction testPasses(test,context) {\n  var testFn = getTestTemplate(test);\n  return testFn(context, getDeepPropFromObj);\n}\n\nfunction getFileContents(path, failSilent, requesterPath) {\n  try {\n    fs.statSync(path);\n  } catch (e) {\n    if (failSilent) {\n      return {error: true, contents: path + ' not found!'};\n    } else {\n      var errMsg = path;\n      errMsg = requesterPath ? errMsg + ' requested from ' + requesterPath : errMsg;\n      errMsg += ' not found!';\n      throw new Error(errMsg);\n    }\n  }\n  return {error: false, contents: fs.readFileSync(path).toString()};\n}\n\nfunction copy(obj) {\n  return Object.keys(obj).reduce(function (copyObj, objKey) {\n    copyObj[objKey] = obj[objKey];\n    return copyObj;\n  }, {});\n}\n\nfunction getDeepPropFromObj(obj, propPath) {\n  propPath.replace(/\\[([^\\]+?])\\]/g, '.$1');\n  propPath = propPath.split('.');\n\n  // fast path, no need to loop if structurePath contains only a single segment\n  if (propPath.length === 1) {\n    return obj[propPath[0]];\n  }\n\n  // loop only as long as possible (no exceptions for null/undefined property access)\n  propPath.some(function (pathSegment) {\n    obj = obj[pathSegment];\n    return (obj == null);\n  });\n\n  return obj;\n}\n","/home/travis/build/npmtest/node-npmtest-preprocess/node_modules/preprocess/lib/regexrules.js":"\nmodule.exports = {\n  simple : {\n    echo : \"^@echo[ \\t]+(.*?)[ \\t]*$\",\n    exec : \"^@exec[ \\t]+(\\\\S+)[ \\t]*\\\\((.*)\\\\)[ \\t]*$\",\n    include          : \"^(.*)@include(?!-)[ \\t]+(.*?)[ \\t]*$\", // allow prefix characters to specify the indent level of included file\n    'include-static' : \"^(.*)@include-static[ \\t]+(.*?)[ \\t]*$\"\n  },\n  html : {\n    echo : \"<!--[ \\t]*@echo[ \\t]+(.*?)[ \\t]*(?:-->|!>)\",\n    exec : \"<!--[ \\t]*@exec[ \\t]+(\\\\S+)[ \\t]*\\\\((.*)\\\\)[ \\t]*(?:-->|!>)\",\n    include          : \"(.*)<!--[ \\t]*@include(?!-)[ \\t]+(.*?)[ \\t]*(?:-->|!>)\",\n    'include-static' : \"(.*)<!--[ \\t]*@include-static[ \\t]+(.*?)[ \\t]*(?:-->|!>)\",\n    exclude : {\n      start : \"[ \\t]*<!--[ \\t]*@exclude(?:[ \\t]+(.*?))?[ \\t]*(?:-->|!>)(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*<!--[ \\t]*@endexclude[ \\t]*(?:-->|!>)(?:[ \\t]*\\n)?\"\n    },\n    extend : {\n      start : \"[ \\t]*<!--[ \\t]*@extend(?!able)[ \\t]+(.*?)[ \\t]*(?:-->|!>)(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*<!--[ \\t]*@endextend[ \\t]*(?:-->|!>)(?:[ \\t]*\\n)?\"\n    },\n    extendable : \"<!--[ \\t]*@extendable[ \\t]*(?:-->|!>)\",\n    if : {\n      start : \"[ \\t]*<!--[ \\t]*@(ifndef|ifdef|if)[ \\t]+(.*?)[ \\t]*(?:-->|!>)(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*<!(?:--)?[ \\t]*@endif[ \\t]*(?:-->|!>)(?:[ \\t]*\\n)?\"\n    },\n    foreach : {\n      start : \"[ \\t]*<!--[ \\t]*@foreach[ \\t]+(.*?)[ \\t]*(?:-->|!>)(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*<!(?:--)?[ \\t]*@endfor[ \\t]*(?:-->|!>)(?:[ \\t]*\\n)?\"\n    }\n  },\n  js : {\n    echo : [\n      \"/\\\\*[ \\t]*@echo[ \\t]+(.*?)[ \\t]*\\\\*(?:\\\\*|/)\",\n      \"//[ \\t]*@echo[ \\t]+(.*?)[ \\t]*$\"\n    ],\n    exec : \"(?://|/\\\\*)[ \\t]*@exec[ \\t]+(\\\\S+)[ \\t]*\\\\((.*)\\\\)[ \\t]*(?:\\\\*(?:\\\\*|/))?\",\n    include : [\n      \"^(.*)/\\\\*[ \\t]*@include(?!-)[ \\t]+(.*?)[ \\t]*\\\\*(?:\\\\*|/)\",\n      \"^(.*)//[ \\t]*@include(?!-)[ \\t]+(.*?)[ \\t]*$\"\n    ],\n    'include-static': [\n      \"^(.*)/\\\\*[ \\t]*@include-static[ \\t]+(.*?)[ \\t]*\\\\*(?:\\\\*|/)\",\n      \"^(.*)//[ \\t]*@include-static[ \\t]+(.*?)[ \\t]*$\"\n    ],\n    exclude : {\n      start : \"[ \\t]*(?://|/\\\\*)[ \\t]*@exclude(?:[ \\t]+([^\\n*]*))?[ \\t]*(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*(?://|/\\\\*)[ \\t]*@endexclude[ \\t]*(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n)?\"\n    },\n    extend : {\n      start : \"[ \\t]*(?://|/\\\\*)[ \\t]*@extend(?!able)[ \\t]+([^\\n*]*)(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*(?://|/\\\\*)[ \\t]*@endextend[ \\t]*(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n)?\"\n    },\n    extendable : \"[ \\t]*(?://|/\\\\*)[ \\t]*@extendable[ \\t]*(?:\\\\*/)?\",\n    if : {\n      start : \"[ \\t]*(?://|/\\\\*)[ \\t]*@(ifndef|ifdef|if)[ \\t]+([^\\n*]*)(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*(?://|/\\\\*)[ \\t]*@endif[ \\t]*(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n)?\"\n    },\n    foreach : {\n      start : \"[ \\t]*(?://|/\\\\*)[ \\t]*@foreach[ \\t]+([^\\n*]*)(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n+)?\",\n      end   : \"[ \\t]*(?://|/\\\\*)[ \\t]*@endfor[ \\t]*(?:\\\\*(?:\\\\*|/))?(?:[ \\t]*\\n)?\"\n    }\n  },\n  coffee : {\n    echo : \"#+[ \\t]*@echo[ \\t]+(.*?)[ \\t]*$\",\n    exec : \"#+[ \\t]*@exec[ \\t]+(\\\\S+)[ \\t]*\\\\((.*)\\\\)[ \\t]*$\",\n    include          : \"^(.*?)#+[ \\t]*@include(?!-)[ \\t]+(.*?)[ \\t]*$\",\n    'include-static' : \"^(.*?)#+[ \\t]*@include-static[ \\t]+(.*?)[ \\t]*$\",\n    exclude : {\n      start : \"^[ \\t]*#+[ \\t]*@exclude(?:[ \\t]+(.*?))?[ \\t]*\\n+\",\n      end   : \"^[ \\t]*#+[ \\t]*@endexclude[ \\t]*\\n?\"\n    },\n    extend : {\n      start : \"^[ \\t]*#+[ \\t]*@extend(?!able)[ \\t]+(.*?)\\n+\",\n      end   : \"^[ \\t]*#+[ \\t]*@endextend[ \\t]*\\n?\"\n    },\n    extendable : \"^[ \\t]*#+[ \\t]*@extendable[ \\t]*$\",\n    if : {\n      start : \"^[ \\t]*#+[ \\t]*@(ifndef|ifdef|if)[ \\t]+(.*?)[ \\t]*\\n+\",\n      end   : \"^[ \\t]*#+[ \\t]*@endif[ \\t]*\\n?\"\n    },\n    foreach : {\n      start : \"^[ \\t]*#+[ \\t]*@foreach[ \\t]+(.*?)[ \\t]*\\n+\",\n      end   : \"^[ \\t]*#+[ \\t]*@endfor[ \\t]*\\n?\"\n    }\n  }\n};\n\nmodule.exports.xml        = module.exports.html;\n\nmodule.exports.javascript = module.exports.js;\nmodule.exports.jsx        = module.exports.js;\nmodule.exports.c          = module.exports.js;\nmodule.exports.cc         = module.exports.js;\nmodule.exports.cpp        = module.exports.js;\nmodule.exports.cs         = module.exports.js;\nmodule.exports.csharp     = module.exports.js;\nmodule.exports.java       = module.exports.js;\nmodule.exports.less       = module.exports.js;\nmodule.exports.sass       = module.exports.js;\nmodule.exports.scss       = module.exports.js;\nmodule.exports.css        = module.exports.js;\nmodule.exports.php        = module.exports.js;\nmodule.exports.ts         = module.exports.js;\nmodule.exports.tsx        = module.exports.js;\nmodule.exports.peg        = module.exports.js;\nmodule.exports.pegjs      = module.exports.js;\nmodule.exports.jade       = module.exports.js;\nmodule.exports.styl       = module.exports.js;\n\nmodule.exports.bash       = module.exports.coffee;\nmodule.exports.shell      = module.exports.coffee;\nmodule.exports.sh         = module.exports.coffee;\n","/home/travis/build/npmtest/node-npmtest-preprocess/node_modules/preprocess/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n  require('time-grunt')(grunt);\n  require('load-grunt-tasks')(grunt);\n\n  grunt.initConfig({\n    clean: {\n      coverage: {\n        src: 'coverage'\n      },\n      test: {\n        src: 'test/tmp'\n      },\n      benchmark: {\n        src: 'benchmark/result.csv'\n      }\n    },\n    copy: {\n      coverage: {\n        expand: true,\n        src: ['test/**'],\n        dest: 'coverage/'\n      }\n    },\n    blanket: {\n      coverage: {\n        src: ['lib'],\n        dest: 'coverage/lib'\n      }\n    },\n    mochaTest: {\n      preprocess: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.spec.js']\n      }\n    },\n    mocha_istanbul: {\n      options: {\n        mask: '*.spec.js',\n        root: './lib',\n        check: {\n          lines: 95,\n          statements: 95\n        }\n      },\n      coverage: {\n        src: 'test',\n        options: {\n          reportFormats: ['lcov'] // html + lcov\n        }\n      }\n    },\n    coveralls: {\n      options: {\n        force: true\n      },\n      all: {\n        src: 'coverage/lcov.info'\n      }\n    },\n    jshint: {\n      options: {\n        jshintrc : '.jshintrc'\n      },\n      lib : ['lib/**/*.js'],\n      test : ['test/**/*.spec.js'],\n      benchmark: ['benchmark/**/*.js']\n    },\n    watch: {\n      src: {\n        options: {\n          atBegin: true\n        },\n        files: [\n          'lib/**/*.js',\n          'test/**/*',\n          '!test/tmp/**/*'\n        ],\n        tasks: ['test', 'coverage']\n      }\n    },\n    benchmark: {\n      options: {\n        displayResults: true\n      },\n\n      'mochaTest-preprocess': {\n        src: ['benchmark/gruntMochaTestPreprocess.js'],\n        dest: 'benchmark/result.csv'\n      }\n    }\n  });\n\n  grunt.registerTask('coverage', ['clean:coverage', 'mocha_istanbul:coverage']);\n  grunt.registerTask('test', ['jshint', 'mochaTest:preprocess']);\n  grunt.registerTask('dev', ['deps-ok', 'watch']);\n  grunt.registerTask('default', ['test', 'coverage']);\n  grunt.registerTask('ci', ['default', 'coveralls']);\n};\n","/home/travis/build/npmtest/node-npmtest-preprocess/node_modules/preprocess/benchmark/gruntMochaTestPreprocess.js":"'use strict';\n\nvar spawn = require('child_process').spawn;\n\nmodule.exports = {\n  name: 'grunt mochaTest:preprocess',\n  maxTime: 10,\n  defer: true,\n  fn: function(deferred) {\n    var spawnGrunt = spawn(process.argv[0], [process.argv[1], 'mochaTest:preprocess']);\n\n    spawnGrunt.stderr.on('data', function(data) {\n      deferred.resolve();\n      throw new Error(data);\n    });\n\n    spawnGrunt.on('exit', function() {\n      deferred.resolve();\n    });\n  }\n};"}